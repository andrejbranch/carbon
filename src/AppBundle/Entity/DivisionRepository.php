<?php

namespace AppBundle\Entity;

use AppBundle\Entity\SampleType;
use AppBundle\Entity\StorageContainer;
use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\MaterializedPathRepository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DivisionRepository extends MaterializedPathRepository
{
    public function findMatchedDivisionsWithDimension(SampleType $sampleType, StorageContainer $storageContainer)
    {
        $qb = $this->createQueryBuilder('d');

        $qb
            ->innerJoin('d.divisionSampleTypes', 'dst')
            ->innerJoin('d.divisionStorageContainers', 'dsc')
            ->andWhere('d.hasDimension = TRUE')
            ->andWhere('dst.sampleTypeId = :sampleTypeId')
            ->andWhere('dsc.storageContainerId = :storageContainerId')
            ->setParameter('sampleTypeId', $sampleType->getId())
            ->setParameter('storageContainerId', $storageContainer->getId())
        ;

        return $qb->getQuery()->getResult();
    }

    public function findMatchedDimensionlessDivisions(SampleType $sampleType, StorageContainer $storageContainer)
    {
        $qb = $this->createQueryBuilder('d');

        $qb
            ->innerJoin('d.divisionSampleTypes', 'dst')
            ->innerJoin('d.divisionStorageContainers', 'dsc')
            ->andWhere('d.hasDimension = FALSE')
            ->andWhere('dst.sampleTypeId = :sampleTypeId')
            ->andWhere('dsc.storageContainerId = :storageContainerId')
            ->setParameter('sampleTypeId', $sampleType->getId())
            ->setParameter('storageContainerId', $storageContainer->getId())
        ;

        return $qb->getQuery()->getResult();
    }
}
